<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>React18新特性</title>
      <link href="/2023/05/07/react18-xin-te-xing/"/>
      <url>/2023/05/07/react18-xin-te-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="Render-Api"><a href="#Render-Api" class="headerlink" title="Render Api"></a>Render Api</h2><p>为了更好的管理<code>root节点</code>，<code>React 18</code> 引入了一个新的 <code>root API</code>，新的 <code>root API</code> 还支持 <code>new concurrent renderer</code>（并发模式的渲染），它允许你进入<code>concurrent mode</code>（并发模式）。</p><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// React 17</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token punctuation">;</span><span class="token keyword">const</span> root <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// React 18</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom/client'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token punctuation">;</span><span class="token keyword">const</span> root <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="setState-批处理"><a href="#setState-批处理" class="headerlink" title="setState 批处理"></a>setState 批处理</h2><p>在React18之前，只有在<strong>React事件处理函数</strong>中会进行批处理更新</p><p>以下代码在18及18之前的版本，都只会打印一次render</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">const</span> BatchSetState <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count1<span class="token punctuation">,</span> setCount1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count2<span class="token punctuation">,</span> setCount2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'render'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token function">setCount1</span><span class="token punctuation">(</span>count1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">setCount2</span><span class="token punctuation">(</span>count2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></span>      <span class="token punctuation">></span></span>        点击      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> BatchSetState<span class="token punctuation">;</span></code></pre><p>而在<strong>promise</strong>,  <strong>setTimeout</strong>, <strong>原生事件处理函数</strong>或<strong>其他任何事件内</strong>都不会批处理</p><p>以下代码，在18的版本中只会打印一次render, 而在之前的版本，会打印两次</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">const</span> BatchSetState2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count1<span class="token punctuation">,</span> setCount1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count2<span class="token punctuation">,</span> setCount2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// useEffect(() => {</span>  <span class="token comment" spellcheck="true">//   document.body.addEventListener('click', () => {</span>  <span class="token comment" spellcheck="true">//     setCount1((count) => count + 1);</span>  <span class="token comment" spellcheck="true">//     setCount2((count) => count + 1);</span>  <span class="token comment" spellcheck="true">//   });</span>  <span class="token comment" spellcheck="true">//   // 在原生js事件中不会进行批处理</span>  <span class="token comment" spellcheck="true">// }, []);</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'render'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">setCount1</span><span class="token punctuation">(</span>count1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setCount2</span><span class="token punctuation">(</span>count2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></span><span class="token attr-name">}</span>      <span class="token punctuation">></span></span>        点击      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> BatchSetState2<span class="token punctuation">;</span></code></pre><h2 id="flushSync"><a href="#flushSync" class="headerlink" title="flushSync"></a>flushSync</h2><p>批处理是一个<strong>破坏性改动</strong>，想退出批量更新，可以用flushSync</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> flushSync <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> FlushSync <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count1<span class="token punctuation">,</span> setCount1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count2<span class="token punctuation">,</span> setCount2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'render'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token function">flushSync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">setCount1</span><span class="token punctuation">(</span>count1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">flushSync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">setCount2</span><span class="token punctuation">(</span>count2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></span><span class="token attr-name">}</span>      <span class="token punctuation">></span></span>        点击      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> FlushSync<span class="token punctuation">;</span></code></pre><p>效果如下，会打印两次render</p><p><img src="/images/flushSync1.png" alt="图1"></p><p>需要注意的是，<strong>一个flushSync里的多个setState</strong>，还是会批处理更新</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> flushSync <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">const</span> FlushSync2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count1<span class="token punctuation">,</span> setCount1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count2<span class="token punctuation">,</span> setCount2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'render'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token function">flushSync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">setCount1</span><span class="token punctuation">(</span>count1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setCount2</span><span class="token punctuation">(</span>count2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></span><span class="token attr-name">}</span>      <span class="token punctuation">></span></span>        点击      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> FlushSync2<span class="token punctuation">;</span></code></pre><p>效果如下</p><p><img src="/images/flushSync2.png" alt="图二"></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://juejin.cn/post/7094037148088664078#heading-26">React18 新特性解读 &amp; 完整版升级指南</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vercel部署流程</title>
      <link href="/2023/04/22/vercel-bu-shu-liu-cheng/"/>
      <url>/2023/04/22/vercel-bu-shu-liu-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="1-导入github项目"><a href="#1-导入github项目" class="headerlink" title="1. 导入github项目"></a>1. 导入github项目</h2><p><a href="https://vercel.com/new">Vercel New Project</a></p><p>绑定Github账号，并选择Github项目，点击Deploy即可</p><p><img src="/images/vercel1.png" alt="vercel1"></p><p><img src="/images/vercel2.png" alt="vercel2"></p><h2 id="2-设置阿里云域名解析"><a href="#2-设置阿里云域名解析" class="headerlink" title="2. 设置阿里云域名解析"></a>2. 设置阿里云域名解析</h2><p>在阿里云域名解析设置中，添加两条记录</p><p><img src="/images/aliyun1.png" alt="aliyun1"></p><p><img src="/images/aliyun2.png" alt="aliyun2"></p><h2 id="3-Vercel添加域名"><a href="#3-Vercel添加域名" class="headerlink" title="3. Vercel添加域名"></a>3. Vercel添加域名</h2><p>在Domains中添加第二步中配置好的域名</p><p><img src="/images/vercel3.png" alt="vercel3"></p>]]></content>
      
      
      <categories>
          
          <category> vercel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vercel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写webpack markdown-loader</title>
      <link href="/2023/04/20/shou-xie-webpack-markdown-loader/"/>
      <url>/2023/04/20/shou-xie-webpack-markdown-loader/</url>
      
        <content type="html"><![CDATA[<h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h2><p>作为webpack的核心，负责资源文件从输入到输出的转换</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><pre class=" language-markdown"><code class="language-markdown">///readme.md<span class="token title important"><span class="token punctuation">##</span> MarkDown-Loader</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">///index.js</span><span class="token keyword">import</span> md <span class="token keyword">from</span> <span class="token string">'./readme.md'</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>md<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">///markdown-loader.js</span><span class="token comment" spellcheck="true">///loader的返回必须是js代码</span><span class="token keyword">const</span> <span class="token punctuation">{</span> marked <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'marked'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> html <span class="token operator">=</span> <span class="token function">marked</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`module.exports = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">///webpack.config.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">'none'</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'[name].js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.md$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token string">'./markdown-loader'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TS-infer关键字</title>
      <link href="/2023/04/13/ts-infer/"/>
      <url>/2023/04/13/ts-infer/</url>
      
        <content type="html"><![CDATA[<h2 id="infer"><a href="#infer" class="headerlink" title="infer"></a>infer</h2><p>在条件类型中申明泛型，使用infer关键字</p><p>有以下两个限制：</p><ol><li>只能在条件类型的extends子句中使用</li><li>infer得到的类型只能在true语句中使用</li></ol><p>申明一个条件类型Element，获取数组中元素的类型：</p><pre class=" language-typescript"><code class="language-typescript">type ElementType<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">=</span> T <span class="token keyword">extends</span> <span class="token class-name">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> T<span class="token punctuation">[</span><span class="token keyword">number</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> Ttype A <span class="token operator">=</span> ElementType<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token comment" spellcheck="true">// number</span></code></pre><p>使用infer关键字重写：</p><pre class=" language-typescript"><code class="language-typescript">type ElementType2<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">=</span> T <span class="token keyword">extends</span> <span class="token punctuation">(</span>infer U<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> U <span class="token punctuation">:</span> Ttype B <span class="token operator">=</span> ElementType2<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token comment" spellcheck="true">// number</span></code></pre><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><pre class=" language-typescript"><code class="language-typescript">type Replace<span class="token operator">&lt;</span>  S <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token punctuation">,</span>  From <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token punctuation">,</span>  To <span class="token keyword">extends</span> <span class="token class-name">string</span><span class="token operator">></span> <span class="token operator">=</span> From <span class="token keyword">extends</span> <span class="token string">''</span>  <span class="token operator">?</span> S  <span class="token punctuation">:</span> S <span class="token keyword">extends</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>infer A<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>From<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>infer B<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>  <span class="token operator">?</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>A<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>To<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>B<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>  <span class="token punctuation">:</span> S<span class="token punctuation">;</span></code></pre><h3 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h3><pre class=" language-typescript"><code class="language-typescript">type Pop<span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token operator">=</span> T <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token operator">...</span>infer I<span class="token punctuation">,</span> infer _<span class="token punctuation">]</span> <span class="token operator">?</span> I <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React-桑基图</title>
      <link href="/2023/02/28/react-sang-ji-tu/"/>
      <url>/2023/02/28/react-sang-ji-tu/</url>
      
        <content type="html"><![CDATA[<h2 id="桑基图"><a href="#桑基图" class="headerlink" title="桑基图"></a>桑基图</h2><p>​    桑基图（Sankey diagram），即桑基能量分流图，也叫桑基能量平衡图。它是一种特定类型的<a href="https://baike.baidu.com/item/%E6%B5%81%E7%A8%8B%E5%9B%BE/206961?fromModule=lemma_inlink">流程图</a>，右图中延伸的分支的宽度对应数据流量的大小，通常应用于<a href="https://baike.baidu.com/item/%E8%83%BD%E6%BA%90/23358?fromModule=lemma_inlink">能源</a>、材料成分、<a href="https://baike.baidu.com/item/%E9%87%91%E8%9E%8D/860?fromModule=lemma_inlink">金融</a>等数据的可视化<a href="https://baike.baidu.com/item/%E5%88%86%E6%9E%90/4327108?fromModule=lemma_inlink">分析</a>。因1898年Matthew Henry Phineas Riall Sankey绘制的“<a href="https://baike.baidu.com/item/%E8%92%B8%E6%B1%BD%E6%9C%BA/367409?fromModule=lemma_inlink">蒸汽机</a>的<a href="https://baike.baidu.com/item/%E8%83%BD%E6%BA%90/23358?fromModule=lemma_inlink">能源</a>效率图”而闻名，此后便以其名字命名为“桑基图”。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redux及Redux ToolKit</title>
      <link href="/2023/01/08/redux-ji-redux-toolkit/"/>
      <url>/2023/01/08/redux-ji-redux-toolkit/</url>
      
        <content type="html"><![CDATA[<h2 id="Redux是什么"><a href="#Redux是什么" class="headerlink" title="Redux是什么"></a>Redux是什么</h2><p><strong>Redux 是一个使用叫做 “action” 的事件来管理和更新应用状态的模式和工具库</strong> 它以集中式 <strong>Store</strong> 的方式对整个应用中使用的状态进行集中管理，确保状态只能以可预测的方式更新。</p><h2 id="Redux-ToolKit是什么"><a href="#Redux-ToolKit是什么" class="headerlink" title="Redux ToolKit是什么"></a>Redux ToolKit是什么</h2><p><strong>Redux Toolkit</strong> 是官方推荐的编写 <strong>Redux</strong> 逻辑的方法。 它包含我们对于构建 <strong>Redux</strong> 应用程序必不可少的包和函数。 <strong>Redux Toolkit</strong> 的构建简化了大多数 <strong>Redux</strong> 任务，防止了常见错误，并使编写 <strong>Redux</strong> 应用程序变得更加容易。可以说 <strong>Redux Toolkit</strong> 就是目前 <strong>Redux</strong> 的最佳实践方式。</p><h2 id="如何实现RTK"><a href="#如何实现RTK" class="headerlink" title="如何实现RTK"></a>如何实现RTK</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// counterSlice.ts 文件</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createSlice <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@reduxjs/toolkit'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">CounterState</span> <span class="token punctuation">{</span>  value<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  title<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">}</span><span class="token keyword">const</span> initialState<span class="token punctuation">:</span> CounterState <span class="token operator">=</span> <span class="token punctuation">{</span>  value<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  title<span class="token punctuation">:</span> <span class="token string">"redux toolkit pre"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建一个 Slice </span><span class="token keyword">export</span> <span class="token keyword">const</span> counterSlice <span class="token operator">=</span> <span class="token function">createSlice</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'counter'</span><span class="token punctuation">,</span>  initialState<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 定义 reducers 并生成关联的操作</span>  reducers<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义一个加的方法</span>    increment<span class="token punctuation">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>value <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 定义一个减的方法</span>    decrement<span class="token punctuation">:</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>value <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 导出加减的方法</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> increment<span class="token punctuation">,</span> decrement <span class="token punctuation">}</span> <span class="token operator">=</span> counterSlice<span class="token punctuation">.</span>actions<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 默认导出</span><span class="token keyword">export</span> <span class="token keyword">default</span> counterSlice<span class="token punctuation">.</span>reducer<span class="token punctuation">;</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// index.ts 文件</span><span class="token keyword">import</span> <span class="token punctuation">{</span> configureStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@reduxjs/toolkit"</span><span class="token punctuation">;</span><span class="token keyword">import</span> counterSlice <span class="token keyword">from</span> <span class="token string">"./features/counterSlice.ts"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// configureStore创建一个redux数据</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">configureStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 合并多个Slice</span>  reducer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    counter<span class="token punctuation">:</span> counterSlice  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span></code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">//index.tsx文件</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom/client'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./redux'</span>ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLElement<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Provider</span> <span class="token attr-name">store</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Provider</span><span class="token punctuation">></span></span><span class="token punctuation">)</span></code></pre><pre class=" language-jsx"><code class="language-jsx"><span class="token comment" spellcheck="true">// App.tsx 文件</span><span class="token comment" spellcheck="true">// 引入相关的hooks</span><span class="token keyword">import</span> <span class="token punctuation">{</span>useSelector<span class="token punctuation">,</span> useDispatch<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 引入对应的方法</span><span class="token keyword">import</span> <span class="token punctuation">{</span>increment<span class="token punctuation">,</span> decrement<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./store/features/counterSlice.ts'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./App.css'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 通过useSelector直接拿到store中定义的value</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>store<span class="token punctuation">.</span>counter<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 通过useDispatch 派发事件</span>  <span class="token keyword">const</span> dispatch <span class="token operator">=</span> <span class="token function">useDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span><span class="token operator">></span>        <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 页面中应用的代码 */</span><span class="token punctuation">}</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>减<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试记录</title>
      <link href="/2022/08/19/mian-shi-ji-lu/"/>
      <url>/2022/08/19/mian-shi-ji-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="2022-08-19量投科技"><a href="#2022-08-19量投科技" class="headerlink" title="2022.08.19量投科技"></a>2022.08.19量投科技</h2><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="2022-08-22鲁班软件"><a href="#2022-08-22鲁班软件" class="headerlink" title="2022.08.22鲁班软件"></a>2022.08.22鲁班软件</h2><h3 id="1-TS泛型的理解"><a href="#1-TS泛型的理解" class="headerlink" title="1. TS泛型的理解"></a>1. TS泛型的理解</h3><ul><li>在定义函数、接口或者类的时候，不预先指定具体的类型，而是在使用的时候再指定类型的一种特性。</li><li>提高代码可重用性，使用泛型来创建可重用的组件，一个组件可以支持多种类型的数据。</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> f<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>    <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-html性能优化"><a href="#2-html性能优化" class="headerlink" title="2. html性能优化"></a>2. html性能优化</h3><ul><li>HTML 优化 减少 iframes 的使用，<ul><li>父 html 需要等待所有 iframe 加载完成</li></ul></li><li>压缩空白符</li><li>避免节点深层次的嵌套</li><li>避免 table 布局</li><li>删除注释</li><li>css&amp;javascript 尽量外链</li><li>删除元素默认属性</li></ul><h3 id="3-css性能优化"><a href="#3-css性能优化" class="headerlink" title="3. css性能优化"></a>3. css性能优化</h3><ul><li>内联首屏关键css</li><li>异步加载非首屏css</li><li>css文件压缩</li><li>css层级嵌套最好不要超过3层</li><li>删除无用css代码</li><li>慎用*通配符</li><li>小图片用雪碧图，字体图标或者转成base64</li><li>避免使用@import</li><li>优化回流和重绘</li></ul><h3 id="4-ES6中的数组方法"><a href="#4-ES6中的数组方法" class="headerlink" title="4. ES6中的数组方法"></a>4. ES6中的数组方法</h3><ul><li>forEach</li><li>map</li><li>filter</li><li>find</li><li>every</li><li>some</li><li>reduce</li></ul><h3 id="5-ajax-axios-fetch区别"><a href="#5-ajax-axios-fetch区别" class="headerlink" title="5. ajax, axios, fetch区别"></a>5. ajax, axios, fetch区别</h3><h5 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h5><ul><li>局部刷新页面，无需重载整个页面。</li></ul><p>简单来说，Ajax 是一种思想，XMLHttpRequest 只是实现 Ajax 的一种方式</p><h5 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h5><ul><li>使用 promise，不使用回调函数。</li><li>采用模块化设计，比如 rep、res 等对象分散开来，比较友好。</li><li>通过数据流对象处理数据，可以提高网站性能。</li></ul><h5 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h5><p>Axios 是一个基于 promise 封装的网络请求库，它是基于 XHR 进行二次封装</p><ul><li>从浏览器中创建 XMLHttpRequests</li><li>从 node.js 创建 http 请求</li><li>支持 Promise API</li><li>拦截请求和响应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换 JSON 数据</li><li>客户端支持防御 XSRF</li></ul><h3 id="6-for，forEach和map的区别"><a href="#6-for，forEach和map的区别" class="headerlink" title="6. for，forEach和map的区别"></a>6. for，forEach和map的区别</h3><ul><li>在固定长度或者长度不需要计算的时候for循环效率高于foreach和map，for循环中可以通过break终止。</li><li>在不确定长度或者计算长度有损性能的时候用foreach和map比较方便</li></ul><h5 id="相同点："><a href="#相同点：" class="headerlink" title="相同点："></a>相同点：</h5><ul><li><p>都是循环遍历数组中的每一项</p></li><li><p>forEach和map方法里每次执行匿名函数都支持3个参数，参数分别是item（当前每一项），index（索引值），arr（原数组）</p></li><li><p>匿名函数中的this都是指向window</p></li><li><p>只能遍历数组</p></li><li><p>都不会改变原数组</p></li></ul><h5 id="不同点："><a href="#不同点：" class="headerlink" title="不同点："></a>不同点：</h5><ul><li>map方法返回一个新的数组，数组中的元素为原始数组调用函数处理后的值</li><li>forEach方法不会返回新数组<h5 id="性能："><a href="#性能：" class="headerlink" title="性能："></a>性能：</h5></li><li>for &gt; forEach &gt; map</li><li>for 循环当然是最简单的，因为它没有任何额外的函数调用栈和上下文</li><li>forEach 其次，因为它其实比我们想象得要复杂一些。它不是普通的 for 循环的语法糖，还有诸多参数和上下文需要在执行的时候考虑进来，这里可能拖慢性能；</li><li>map 最慢，因为它的返回值是一个等长的全新的数组，数组创建和赋值产生的性能开销很大。</li></ul><h3 id="7-性能优化方案"><a href="#7-性能优化方案" class="headerlink" title="7. 性能优化方案"></a>7. 性能优化方案</h3><ul><li>减少HTTP请求</li><li>使用服务端渲染</li><li>静态资源使用CDN</li><li>CSS文件放在头部，JS文件放在底部</li><li>善用缓存，不重复加载相同的资源</li><li>压缩文件</li><li>图片延迟加载</li><li>使用事件委托</li><li>使用Web Workers</li></ul><h2 id="2022-08-23-聚水潭"><a href="#2022-08-23-聚水潭" class="headerlink" title="2022.08.23 聚水潭"></a>2022.08.23 聚水潭</h2><h2 id="2022-08-29-拼多多"><a href="#2022-08-29-拼多多" class="headerlink" title="2022.08.29 拼多多"></a>2022.08.29 拼多多</h2><h3 id="1-实现Promise重试"><a href="#1-实现Promise重试" class="headerlink" title="1. 实现Promise重试"></a>1. 实现Promise重试</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">runWithRetry</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> retryTimes<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>retryTimes <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">runWithRetry</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> retryTimes <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">asyncApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'failed'</span><span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'failed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">runWithRetry</span><span class="token punctuation">(</span>asyncApp<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></code></pre><h3 id="2-Promise的输出"><a href="#2-Promise的输出" class="headerlink" title="2. Promise的输出"></a>2. Promise的输出</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">asyncApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'failed'</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">asyncApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'then1'</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'then2'</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'catch1'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'then3'</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 输出</span>catch1 failedthen3 underfined</code></pre><h3 id="3-倒计时组件"><a href="#3-倒计时组件" class="headerlink" title="3. 倒计时组件"></a>3. 倒计时组件</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">CountDown</span><span class="token punctuation">(</span><span class="token punctuation">{</span> process <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>process<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setCount</span><span class="token punctuation">(</span>process<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>process<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      id <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-defer和async的区别"><a href="#4-defer和async的区别" class="headerlink" title="4. defer和async的区别"></a>4. defer和async的区别</h3><ul><li>defer, 当浏览器遇到带有 defer 属性的 script 时，获取该脚本的网络请求也是异步的，不会阻塞浏览器解析 HTML，一旦网络请求回来之后，如果此时 HTML 还没有解析完，浏览器不会暂停解析并执行 JS 代码，而是等待 HTML 解析完毕再执行 JS 代码</li><li>async, 当浏览器遇到带有 async 属性的 script 时，请求该脚本的网络请求是异步的，不会阻塞浏览器解析 HTML，一旦网络请求回来之后，如果此时 HTML 还没有解析完，浏览器会暂停解析，先让 JS 引擎执行代码，执行完毕后再进行解析</li></ul><h3 id="5-flex"><a href="#5-flex" class="headerlink" title="5. flex"></a>5. flex</h3><ul><li>flex-grow: 定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大</li><li>flex-shrink: 定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小</li><li>flex-basis: 定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小</li><li>flex-wrap: 定义，如果一条轴线排不下，如何换行</li></ul><h3 id="6-CSS选择器"><a href="#6-CSS选择器" class="headerlink" title="6. CSS选择器"></a>6. CSS选择器</h3><ul><li><pre class=" language-css"><code class="language-css"><span class="token selector">// 同时有a, b两个class<span class="token class">.a.b</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">}</span></code></pre></li><li><pre class=" language-css"><code class="language-css"><span class="token selector">// a元素内的所有b子元素<span class="token class">.a</span> <span class="token class">.b</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">}</span></code></pre></li><li><pre class=" language-css"><code class="language-css"><span class="token selector">// 父级是a元素的b元素<span class="token class">.a</span> > <span class="token class">.b</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">}</span></code></pre></li><li><pre class=" language-css"><code class="language-css"><span class="token selector">// 紧跟在a元素后的第一个b元素<span class="token class">.a</span> + <span class="token class">.b</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">}</span></code></pre></li></ul><h3 id="7-用过哪些抓包工具"><a href="#7-用过哪些抓包工具" class="headerlink" title="7. 用过哪些抓包工具"></a>7. 用过哪些抓包工具</h3>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript学习记录</title>
      <link href="/2022/03/27/typescript-xue-xi-ji-lu/"/>
      <url>/2022/03/27/typescript-xue-xi-ji-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h2><h3 id="数字-number"><a href="#数字-number" class="headerlink" title="数字 number"></a>数字 number</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> level<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">6</span></code></pre><h3 id="字符串-string"><a href="#字符串-string" class="headerlink" title="字符串 string"></a>字符串 string</h3><pre class=" language-typescript"><code class="language-typescript">cosnt name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">:</span> <span class="token string">"huangping"</span></code></pre><h3 id="布尔值-boolean"><a href="#布尔值-boolean" class="headerlink" title="布尔值 boolean"></a>布尔值 boolean</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> isBoy<span class="token punctuation">:</span> <span class="token keyword">boolean</span> <span class="token operator">=</span> <span class="token keyword">true</span></code></pre><h3 id="数组-array"><a href="#数组-array" class="headerlink" title="数组 array"></a>数组 array</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">const</span> list<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></code></pre><h3 id="元组-Tuple"><a href="#元组-Tuple" class="headerlink" title="元组 Tuple"></a>元组 Tuple</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span></code></pre><h3 id="枚举-enum"><a href="#枚举-enum" class="headerlink" title="枚举 enum"></a>枚举 enum</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Color <span class="token punctuation">{</span> Red<span class="token punctuation">,</span> Green<span class="token punctuation">,</span> Yellow <span class="token punctuation">}</span><span class="token keyword">let</span> c<span class="token punctuation">:</span> Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>Green<span class="token punctuation">;</span></code></pre><h3 id="任意值-any"><a href="#任意值-any" class="headerlink" title="任意值 any"></a>任意值 any</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> a<span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token operator">=</span> <span class="token number">4</span>a <span class="token operator">=</span> <span class="token string">'huangping'</span></code></pre><h3 id="空值-void"><a href="#空值-void" class="headerlink" title="空值 void"></a>空值 void</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">voidFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'void'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="Null和Undefined"><a href="#Null和Undefined" class="headerlink" title="Null和Undefined"></a>Null和Undefined</h3><h3 id="Never"><a href="#Never" class="headerlink" title="Never"></a>Never</h3><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> someValue<span class="token punctuation">:</span> <span class="token keyword">any</span> <span class="token operator">=</span> <span class="token string">"this is a string"</span><span class="token punctuation">;</span><span class="token keyword">let</span> strLength<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span>someValue<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>or<span class="token keyword">let</span> strLength<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token punctuation">(</span>someValue as <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span></code></pre><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>用interface关键字定义一个接口</p><ul><li>当接属性可选时，可在属性名字定义后面加上一个<code>?</code>符号</li><li>只读属性，可在属性名前用readonly来指定</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">person</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    address<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>    readonly sex<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伪类和伪元素</title>
      <link href="/2021/10/09/wei-lei-he-wei-yuan-su/"/>
      <url>/2021/10/09/wei-lei-he-wei-yuan-su/</url>
      
        <content type="html"><![CDATA[<h2 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes">伪类</a>是添加到选择器的关键字，用于指定所选元素的特殊状态。例如，伪类 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:hover"><code>:hover</code></a> 可以用于选择一个按钮，当用户的指针悬停在按钮上时，设置此按钮的样式。</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 用户的指针悬停在其上的任何按钮 */</span><span class="token selector">button<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>伪类由冒号（<code>:</code>）后跟着伪类名称组成（例如，<code>:hover</code>）。函数式伪类还包含一对括号来定义参数（例如，<code>:dir()</code>）。附上了伪类的元素被定义为<em>锚元素</em>（例如，<code>button:hover</code> 中的 <code>button</code>）。</p><p>伪类让你可以将样式应用于元素，不仅与文档树内容有关，也与外部因素有关——如与导航历史有关的（例如，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:visited"><code>:visited</code></a>）、与其内容的状态有关的（如某些表单元素上的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:checked"><code>:checked</code></a>）或者与鼠标位置有关的（如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:hover"><code>:hover</code></a>，它可以让你知道鼠标是否在一个元素上）。</p><h2 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-elements">伪元素</a>是一个附加至选择器末的关键词，允许你对被选择元素的特定部分修改样式。下例中的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::first-line"><code>::first-line</code></a> 伪元素可改变段落首行文字的样式。</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 每一个 &lt;p> 元素的第一行。 */</span><span class="token selector">p<span class="token pseudo-element">::first-line</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>  <span class="token property">text-transform</span><span class="token punctuation">:</span> uppercase<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>伪元素创造的元素不存在在DOM文档中。代表某个元素的子元素，这个子元素虽然在逻辑上存在，但却并不实际存在于文档树中。</p><h2 id="单冒号和双冒号"><a href="#单冒号和双冒号" class="headerlink" title="单冒号和双冒号"></a>单冒号和双冒号</h2><p>按照规范，伪类使用单冒号**:**  伪元素使用双冒号**::**</p><p>不过由于早期没有规范进行区分，css3之前的伪元素，如<code>::before</code>, <code>::after</code>等，也可用单冒号，而再css3中引入的伪元素不支持单冒号的写法，如<code>::selection</code></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>稀疏数组与密集数组</title>
      <link href="/2021/07/15/xi-shu-shu-zu-yu-mi-ji-shu-zu/"/>
      <url>/2021/07/15/xi-shu-shu-zu-yu-mi-ji-shu-zu/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    在工作中，经常会遇到这种情况，想要获得内容为数字1-10的数组，使用以下方法确得不到相应的结果</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> </code></pre><p>​    这是为什么呢，这就引出以下这个概念<em><strong>稀疏数组</strong></em></p><h2 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h2><p>​    什么是稀疏数组呢？顾名思义，就是不连续的数组，数组元素之间存在间隙。上面生成数字的代码结果如下，会发现是10个empty。</p><p><img src="/images/image-20220502222003725.png" alt="图1"></p><p>​    实际上，<code>new Array(10)</code>生成的就是稀疏数组，数组中没有相应的索引，阅读数组map方法的源码可以发现，该方法是按照数组的索引去遍历的，</p><p><img src="/images/image-20220502223057368.png" alt="图2"></p><p>​    在控制台中敲入如下代码，我们发现索引值不存在与数组arr中，所以调用执行最上面的代码时无法获得想要获得的结果。</p><h2 id="密集数组"><a href="#密集数组" class="headerlink" title="密集数组"></a>密集数组</h2><p>​    与稀疏数组相对应的，就是<em><strong>密集数组</strong></em>，所谓密集数组，就是占据连续内存空间，数组元素间不存在间隙。</p><p>​    回到开头，我们想要获得内容为1-10的密集数组，可以使用以下方法：</p><ol><li></li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></code></pre><ol start="2"><li></li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> length<span class="token punctuation">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></code></pre><ol start="3"><li></li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录我的Hexo博客搭建过程</title>
      <link href="/2021/06/30/ji-lu-wo-de-hexo-bo-ke-da-jian-guo-cheng/"/>
      <url>/2021/06/30/ji-lu-wo-de-hexo-bo-ke-da-jian-guo-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><h3 id="一-创建github仓库"><a href="#一-创建github仓库" class="headerlink" title="一.创建github仓库"></a>一.创建github仓库</h3><ol><li><p>在github下新建一个仓库，名为<span style="color: red">你的用户名.github.io</span></p></li><li><p>配置ssh key，右键git bash here，分别执行如下命令</p><pre><code>git config --global user.name "你的GitHub用户名"git config --global user.email "你的GitHub注册邮箱"</code></pre></li><li><p>生成ssh密钥文件</p><pre><code>ssh-keygen -t rsa -C "你的GitHub注册邮箱"</code></pre></li></ol><p>直接回车，在C:\Users\A.ssh(以自己的目录为准)下生成<span style="color: red">id_rsa.pub</span>密钥，打开<a href="https://github.com/settings/keys">GitHub_Settings_keys</a> 页面，新建new SSH Key，将<span style="color: red">id_rsa.pub</span>密钥复制进去。</p><h3 id="二-博客的安装与部署"><a href="#二-博客的安装与部署" class="headerlink" title="二.博客的安装与部署"></a>二.博客的安装与部署</h3><p>使用npm安装hexo:</p><pre><code>npm install -g hexo-cli</code></pre><p>初始化博客</p><pre><code>hexo init blog</code></pre><p>在blog目录下执行下面命令启动博客查看是否初始化成功，执行完可在<a href="http://localhost:4000/">localhost:4000</a>下查看</p><pre><code>hexo ghexo s</code></pre><p>打开blog目录下得_config.yml文件，与github关联起来，滚到最后，修改为(repo填自己的仓库)：</p><pre><code>deploy:type: gitrepo: https://github.com/YeloowCan/YeloowCan.github.iobranch: master</code></pre><p>安装git部署插件</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>按顺序执行以下命令进行部署</p><pre><code>hexo cleanhexo ghexo d</code></pre><p>浏览器打开<a href="https://yeloowcan.github.io/">yeloowcan.github.io</a>，可以访问到博客了</p><h3 id="三-绑定域名"><a href="#三-绑定域名" class="headerlink" title="三.绑定域名"></a>三.绑定域名</h3><ol><li><p>可以在阿里云上购买的域名，我买的是<a href="https://www.yellowcan.top/">yellowcan.top</a>，打开阿里云的域名控制台，添加一条A记录，记录值是ip地址（可以Ping仓库地址获取IP地址），再添加一条CNAME记录，记录值是博客地址，比如我的是：yeloowcan.github.io。</p></li><li><p>再本地博客目录source文件夹下新建一个CNAME文件<span style="color: red">（！！！一定要保存为所有文件，不能保存为txt文件，可以先新建文本文档后将后缀名直接删掉直接把文件）</span>，里面写进你的域名，我的是：<a href="http://www.yellowcan.top/">www.yellowcan.top</a></p></li><li><p>再顺序执行以下命令进行部署</p><pre><code> hexo clean hexo g hexo d</code></pre></li><li><p>在浏览器里访问自己的域名，就可以访问到自己的博客啦。</p></li></ol><h3 id="四-修改主题"><a href="#四-修改主题" class="headerlink" title="四.修改主题"></a>四.修改主题</h3><p>我用的是matery，在本地博客的theme文件下执行下面命令将主题下载下来：</p><pre><code>    git clone https://github.com/blinkfox/hexo-theme-matery.git</code></pre><p>然后打开博客的_config.yml文件，将theme改为hexo-theme-matery</p><pre><code>        theme: hexo-theme-matery</code></pre><p>最后再执行下面命令部署一下，就可以啦</p><pre><code>        hexo clean        hexo g        hexo d</code></pre><p>打开自己的域名，博客大功告成，我的博客地址：<a href="http://yellowcan.top/">yellowcan.top</a></p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
